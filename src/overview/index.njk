---
title: Overview
layout: app-layout.njk
---

<style>
  article {
    height: 100%;
  }

  .grid-wrapper {
    height: 100%;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    padding-block-end: 11px;
  }

  .sections {
    display: grid;
    grid-gap: 1rem;
    grid-template-columns: repeat(4, minmax(calc((var(--max-width) - 3rem) / 4), 1fr));
    height: 100%;
  }

  .sections section {
    height: 100%;
    scroll-snap-align: start;
  }

  section {
    display: grid;
    grid-template-rows: auto 1fr auto;
  }

  .full-width-button {
    display: block;
    width: 100%;
    padding: 0.5em;
    border: 0.125em solid var(--text-color);
    text-decoration: none;
    text-align: center;
  }

  [data-section-heading] {
    border-block-end: 0.125em solid var(--text-color);
  }

  [data-section-body] {
    max-height: calc(100vh - 13rem - 11px);
    overflow-y: auto;
  }

  .grid-wrapper::-webkit-scrollbar,
  [data-section-body]::-webkit-scrollbar {
    width: 11px;
  }

  .grid-wrapper,
  [data-section-body] {
    scrollbar-width: thin;
    scrollbar-color: var(--scrollbar-color) transparent;
  }

  .grid-wrapper::-webkit-scrollbar-track,
  [data-section-body]::-webkit-scrollbar-track {
    background: transparent;
  }

  .grid-wrapper::-webkit-scrollbar-thumb,
  [data-section-body]::-webkit-scrollbar-thumb {
    background-color: var(--scrollbar-color);
    border-radius: 6px;
    border: 3px solid var(--scrollbar-color);
  }
</style>

{% include "month-nav.njk" %}

<div class="grid-wrapper">
  <div class="sections">
    <section>
      <div class="cluster overflow:hidden padding:halfem" data-section-heading>
        <div class="justify-content:space-between">
          <h2 class="h5">
            Expenses
          </h2>
          <p data-total-expenses>
            $0.00
          </p>
        </div>
      </div>
      <div class="stack padding:halfem" data-expenses data-section-body>
        <div data-no-expenses hidden>
          <p>
            You haven't tracked any expenses yet.
          </p>
        </div>
      </div>
      <div>
        <a href="/add/expense" class="full-width-button" data-add-expense-link>
          Add Expense
        </a>
      </div>
    </section>
    <section>
      <div class="cluster overflow:hidden padding:halfem" data-section-heading>
        <div class="justify-content:space-between">
          <h2 class="h5">
            Income
          </h2>
          <p data-total-income>
            $0.00
          </p>
        </div>
      </div>
      <div class="stack padding:halfem" data-section-body>
        <div>
          <p>
            You haven't tracked any income yet.
          </p>
        </div>
      </div>
      <div>
        <a href="/add/income" class="full-width-button" data-add-income-link>
          Add Income
        </a>
      </div>
    </section>
    <section>
      <div class="cluster overflow:hidden padding:halfem" data-section-heading>
        <div class="justify-content:space-between">
          <h2 class="h5">
            Savings
          </h2>
          <p data-total-savings>
            $0.00
          </p>
        </div>
      </div>
      <div class="stack padding:halfem" data-section-body>
        <div>
          <p>
            You haven't tracked any savings yet.
          </p>
        </div>
      </div>
      <div>
        <a href="/add/savings" class="full-width-button" data-add-savings-link>
          Add Savings
        </a>
      </div>
    </section>
    <section>
      <div class="cluster overflow:hidden padding:halfem" data-section-heading>
        <div class="justify-content:space-between">
          <h2 class="h5">
            Debt
          </h2>
          <p data-total-debt>
            $0.00
          </p>
        </div>
      </div>
      <div class="stack padding:halfem" data-section-body>
        <div>
          <p>
            You haven't tracked any debt yet.
          </p>
        </div>
      </div>
      <div>
        <a href="/add/debt" class="full-width-button" data-add-debt-link>
          Add Debt
        </a>
      </div>
   </section>
  </div>
</div>

<script>
  const addExpenseLink = document.querySelector('[data-add-expense-link]');
  const addIncomeLink = document.querySelector('[data-add-income-link]');
  const addSavingsLink = document.querySelector('[data-add-savings-link]');
  const addDebtLink = document.querySelector('[data-add-debt-link]');

  addExpenseLink.href = `/add/expense?m=${month}&y=${year}`;
  addIncomeLink.href = `/add/income?m=${month}&y=${year}`;
  addSavingsLink.href = `/add/savings?m=${month}&y=${year}`;
  addDebtLink.href = `/add/debt?m=${month}&y=${year}`;
</script>
<script>
  const formatCurrency = (value, locale = 'en-US', currency = 'USD') => new Intl
  .NumberFormat(locale, { style: 'currency', currency })
  .format(value);
</script>
<script>
  const formatDate = (year, month, day, locale = 'en-US') => new Intl
  .DateTimeFormat(locale, { year: '2-digit', month: 'numeric', day: 'numeric' })
  .format(new Date(year, month, day));
</script>
<script type="module">
  import { getAllFromIndex } from '/scripts/db.mjs';

  const getExpenses = async () => {
    const expenses = await getAllFromIndex('expenses', 'year-month', year, month);
    if (!expenses?.length) {
      const noExpensesMessage = document.querySelector('[data-no-expenses]');
      noExpensesMessage.removeAttribute('hidden');
      return;
    }

    const total = expenses.reduce((a, b) => a + b.amount, 0);
    const totalExpensesIndicator = document.querySelector('[data-total-expenses]');
    totalExpensesIndicator.innerHTML = formatCurrency(total);

    let categories = expenses.reduce((acc, expense) => {
      if (acc[expense.category]) {
        acc[expense.category].expenses.push(expense);
      } else {
        acc[expense.category] = {
          name: expense.category,
          expenses: [expense],
        };
      }

      return acc;
    }, {});

    const expensesBody = document.querySelector('[data-expenses][data-section-body]');
    const expensesBlock = Object.keys(categories)
      .sort((a, b) => {
        const aTotal = categories[a].expenses.reduce((a, b) => a + b.amount, 0);
        const bTotal = categories[b].expenses.reduce((a, b) => a + b.amount, 0);
        if (aTotal < bTotal) {
          return 1;
        }

        if (aTotal > bTotal) {
          return -1;
        }

        return 0;
      })
    .map((key) => {
      const category = categories[key];
      const categoryTotal = category.expenses.reduce((a, b) => a + b.amount, 0);
      return `
        <div>
          <div class="cluster">
            <div class="justify-content:space-between">
              <h3 class="h5">
                ${category.name}
              </h3>
              <p class="h5">
                ${formatCurrency(categoryTotal)}
              </p>
            </div>
          </div>
          <div class="stack" style="--stack-space: 0.75em">
            ${category.expenses.map((expense) => {
              return `
                <div>
                  <p class="tiny font-style:italic">
                    ${formatDate(expense.year, expense.month, expense.day)}
                  </p>
                  <div class="cluster small">
                    <div class="justify-content:space-between">
                      <a href="/edit/expense?key=${expense.key}">
                        ${expense.description}
                      </a>
                      <p>
                        ${formatCurrency(expense.amount)}
                      </p>
                    </div>
                  </div>
                </div>
              `;
            }).join('')}
          </div>
        </div>
      `;
    }).join('');

    expensesBody.innerHTML = expensesBlock;
  };

  getExpenses();
</script>
