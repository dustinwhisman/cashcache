---
title: Add Expense
layout: layouts/simple-layout.njk
description: Add an expense. Categorize it, describe it, and say how much you spent.
---

<h1>
  Add Expense
</h1>

<div>
  <a href="/overview" data-back-link>
    Go Back
  </a>
</div>

<form class="stack">
  {% include "inputs/date-inputs.njk" %}
  {% include "inputs/category-inputs.njk" %}
  <div>
    <label for="expense-description">
      Description
    </label>
    <input id="expense-description" type="text" name="expense-description" required>
  </div>
  <div>
    <label for="amount">
      Amount
    </label>
    <input id="amount" type="text" name="amount" inputmode="numeric" pattern="^(\s{1,})?\$?\d{1,3}(,?\d{3})*(\.\d+)?(\s{1,})?$" style="width: 12ch" autofill="false" autocomplete="off" required>
  </div>
  <input type="hidden" name="key" value="">
  <div>
    <span class="visually-hidden" role="status" data-submit-status></span>
    <button type="submit" data-label-saving="Saving..." data-label-saved="Saved!" data-label-failed="Failed to Save. Try Again?">
      Save Expense
    </button>
  </div>
</form>

{% include "scripts/firebase.njk" %}
{% include "scripts/sanitize.njk" %}
<script type="module">
  import { getAllCategories, getAllCategoriesFromCloud, addToDb } from '/scripts/db.mjs';
  import { updateBackLink } from '/scripts/utilities/index.mjs';

  updateBackLink();

  const storeName = 'expenses';
  let networkCategoriesLoaded = false;
  let cachedCategoriesLoaded = false;
  const renderCategories = (categories) => {
    const categoriesDiv = document.querySelector('[data-category]');
    let categoryTemplate = `
      <label class="custom-checkbox">
        <input type="radio" name="category" value="new-category" required>
        {% include "svgs/radio-svg.njk" %}
        <span>
          New Category
        </span>
      </label>
    `;
    categories?.sort().forEach((category) => {
      categoryTemplate += `
        <label class="custom-checkbox">
          <input type="radio" name="category" value="${category}" required>
          {% include "svgs/radio-svg.njk" %}
          <span>
            ${category}
          </span>
        </label>
      `;

    });
    categoriesDiv.innerHTML = categoryTemplate;
  };

  document.addEventListener('submit', async (event) => {
    event.preventDefault();

    const { elements } = event.target;
    const expense = {
      uid: appUser?.uid,
      key: elements['key'].value || null,
      year: Number(elements['year'].value),
      month: Number(elements['month'].value) - 1,
      day: Number(elements['day'].value),
      category: elements['category'].value === 'new-category' ? elements['new-category'].value : elements['category'].value,
      description: elements['expense-description'].value,
      amount: sanitize(elements['amount'].value),
    };

    const statusElement = document.querySelector('[data-submit-status]');
    const button = event.target.querySelector('button[type=submit]');
    const savingMessage = button.dataset.labelSaving;
    const savedMessage = button.dataset.labelSaved;
    const failedMessage = button.dataset.labelFailed;

    try {
      button.innerHTML = savingMessage;
      statusElement.innerHTML = savingMessage;

      await addToDb('expenses', expense);

      button.innerHTML = savedMessage;
      statusElement.innerHTML = savedMessage;

      const month = Number(elements['month'].value) - 1;
      const year = Number(elements['year'].value);
      window.location.href = `/overview?m=${month}&y=${year}`;
    } catch (error) {
      button.innerHTML = failedMessage;
      statusElement.innerHTML = failedMessage;
      console.error(error);
    }
  });

  (async () => {
    const categories = await getAllCategories(storeName);
    cachedCategoriesLoaded = true;

    if (!networkCategoriesLoaded) {
      renderCategories(categories);
    }
  })();

  document.addEventListener('token-confirmed', async () => {
    if (appUser?.uid && isPayingUser) {
      const categories = await getAllCategoriesFromCloud(storeName, appUser?.uid);
      networkCategoriesLoaded = true;

      if (!cachedCategoriesLoaded) {
        renderCategories(categories);
      } else {
        const form = document.querySelector('form');
        const category = form.elements['category'].value;

        let categoryInput = document.querySelector(`[name=category][value="${category}"]`);
        const isFocused = categoryInput === document.activeElement;
        renderCategories(categories);
        categoryInput = document.querySelector(`[name=category][value="${category}"]`);
        if (categoryInput) {
          categoryInput.checked = true;
          if (isFocused) {
            categoryInput.focus();
          }
        }
      }
    }
  });
</script>
