---
title: Edit Recurring Income
layout: layouts/simple-layout.njk
description: Edit or delete recurring income. You can also set it to inactive in case you were furloughed or something like that.
---

<style>
  .dates-grid {
    display: grid;
    grid-gap: 0.75em;
    grid-template-columns: repeat(7, max-content);
    font-size: calc(var(--h6));
  }
</style>

<h1>
  Edit Recurring Income
</h1>

{% include "components/back-link.njk" %}

<div class="stack" data-access-denied hidden>
  <p>You don't have access to this record.</p>
  <p data-belongs-to-user hidden>
    It belongs to a user that isn't you. You may need to log in to see it or
    change accounts if you are already logged in.
  </p>
  <p data-belongs-to-nobody hidden>
    It is not associated with a user, which means that it should only be seen by
    somebody who is not logged in.
  </p>
</div>

<div class="stack" data-typical-state>
  <div>
    <button type="button" data-delete data-key="">
      Delete this Recurring Income
    </button>
  </div>

  <form class="stack">
    {% include "inputs/category-inputs.njk" %}
    <div>
      <label for="income-description">
        Description
      </label>
      <input id="income-description" type="text" name="income-description" required>
    </div>
    <div>
      <label for="amount">
        Amount
      </label>
      <input id="amount" type="text" name="amount" inputmode="numeric" pattern="^(\s{1,})?\$?\d{1,3}(,?\d{3})*(\.\d+)?(\s{1,})?$" style="width: 12ch" autofill="false" autocomplete="off" required>
    </div>
    <fieldset>
      <legend>
        Frequency
      </legend>
      <div class="stack" style="--stack-space: 0.5em">
        <label class="custom-checkbox">
          <input type="radio" name="frequency" value="1-month" checked>
          {% include "svgs/radio-svg.njk" %}
          <span>
            Every Month
          </span>
        </label>
        <label class="custom-checkbox">
          <input type="radio" name="frequency" value="3-month">
          {% include "svgs/radio-svg.njk" %}
          <span>
            Every 3 Months
          </span>
        </label>
        <label class="custom-checkbox">
          <input type="radio" name="frequency" value="6-month">
          {% include "svgs/radio-svg.njk" %}
          <span>
            Every 6 Months
          </span>
        </label>
        <label class="custom-checkbox">
          <input type="radio" name="frequency" value="1-year">
          {% include "svgs/radio-svg.njk" %}
          <span>
            Every Year
          </span>
        </label>
        <label class="custom-checkbox">
          <input type="radio" name="frequency" value="1-week">
          {% include "svgs/radio-svg.njk" %}
          <span>
            Every Week
          </span>
        </label>
        <label class="custom-checkbox">
          <input type="radio" name="frequency" value="2-week">
          {% include "svgs/radio-svg.njk" %}
          <span>
            Every 2 Weeks
          </span>
        </label>
        <label class="custom-checkbox">
          <input type="radio" name="frequency" value="twice-per-month">
          {% include "svgs/radio-svg.njk" %}
          <span>
            Twice per Month
          </span>
        </label>
      </div>
    </fieldset>
    {% include "inputs/complex-dates.njk" %}
    <label class="custom-checkbox">
      <input type="checkbox" name="active" checked>
      {% include "svgs/checkbox-svg.njk" %}
      <span>
        This recurring income is currently active
      </span>
    </label>
    <input type="hidden" name="key" value="">
    <div>
      <span class="visually-hidden" role="status" data-submit-status></span>
      <button type="submit" data-label-saving="Saving..." data-label-saved="Saved!" data-label-failed="Failed to Save. Try Again?">
        Save Changes
      </button>
    </div>
  </form>
</div>

{% include "scripts/firebase.njk" %}
{% include "scripts/sanitize.njk" %}
{% include "scripts/format-currency.njk" %}
<script type="module">
  import { getAllCategories, getAllCategoriesFromCloud, getFromDb, getFromCloudDb, addToDb, deleteFromDb } from '/scripts/db.mjs';

  if (!appUser?.uid || !isPayingUser) {
    window.location.href = '/recurring-income';
  }

  let key;
  const storeName = 'income';
  let networkCategoriesLoaded = false;
  let cachedCategoriesLoaded = false;
  const renderCategories = (categories) => {
    const categoriesDiv = document.querySelector('[data-category]');
    let categoryTemplate = `
      <label class="custom-checkbox">
        <input type="radio" name="category" value="new-category" required>
        {% include "svgs/radio-svg.njk" %}
        <span>
          New Category
        </span>
      </label>
    `;
    categories?.sort().forEach((category) => {
      categoryTemplate += `
        <label class="custom-checkbox">
          <input type="radio" name="category" value="${category}" required>
          {% include "svgs/radio-svg.njk" %}
          <span>
            ${category}
          </span>
        </label>
      `;

    });
    categoriesDiv.innerHTML = categoryTemplate;
  };

  document.addEventListener('submit', async (event) => {
    event.preventDefault();

    const { elements } = event.target;
    const income = {
      uid: appUser?.uid,
      key: elements['key'].value || null,
      category: elements['category'].value === 'new-category' ? elements['new-category'].value : elements['category'].value,
      description: elements['income-description'].value,
      amount: sanitize(elements['amount'].value),
      year: Number(elements['year'].value),
      month: Number(elements['month'].value) - 1,
      day: Number(elements['day'].value),
      frequency: elements['frequency'].value,
      daysOfMonth: Array.from(elements['days-of-month']).filter(checkbox => checkbox.checked).map(checkbox => Number(checkbox.value)),
      active: elements['active'].checked,
    };

    const statusElement = document.querySelector('[data-submit-status]');
    const button = event.target.querySelector('button[type=submit]');
    const savingMessage = button.dataset.labelSaving;
    const savedMessage = button.dataset.labelSaved;
    const failedMessage = button.dataset.labelFailed;

    try {
      button.innerHTML = savingMessage;
      statusElement.innerHTML = savingMessage;

      await addToDb('recurring-income', income);

      button.innerHTML = savedMessage;
      statusElement.innerHTML = savedMessage;

      window.location.href = `/recurring-income`;
    } catch (error) {
      button.innerHTML = failedMessage;
      statusElement.innerHTML = failedMessage;
      console.error(error);
    }
  });

  const populateForm = (income) => {
    const form = document.querySelector('form');
    const { elements } = form;
    elements['key'].value = income.key;

    if (elements['income-description'] !== document.activeElement) {
      elements['income-description'].value = `${income.description}`;
    }

    if (elements['amount'] !== document.activeElement) {
      elements['amount'].value = `${formatCurrency(income.amount)}`;
    }

    if (elements['year'] !== document.activeElement) {
      elements['year'].value = `${income.year}`;
    }

    if (elements['month'] !== document.activeElement) {
      elements['month'].value = `${income.month + 1}`;
    }

    if (elements['day'] !== document.activeElement) {
      elements['day'].value = `${income.day}`;
    }

    if (document.activeElement.name !== 'frequency') {
      elements['frequency'].value = `${income.frequency}`;
    }

    if (document.activeElement.name !== 'days-of-month') {
      income.daysOfMonth.forEach((day) => {
        const dayInput = document.querySelector(`[name="days-of-month"][value="${day}"]`);
        dayInput.checked = true;
      });
    }

    if (document.activeElement.name !== 'category') {
      const categoryInput = document.querySelector(`[name=category][value="${income.category}"]`);
      if (categoryInput) {
        categoryInput.checked = true;
      }
    }

    if (elements['frequency'].value === 'twice-per-month') {
      const simpleDatesBlock = document.querySelector('[data-simple-dates]');
      const complexDatesBlock = document.querySelector('[data-complex-dates]');
      simpleDatesBlock.setAttribute('hidden', true);
      complexDatesBlock.removeAttribute('hidden');
    }

    if (document.activeElement.name !== 'active') {
      if (!income.active) {
        const activeInput = document.querySelector('[name=active]');
        activeInput.checked = false;
      }
    }
  };

  (async () => {
    const params = new URLSearchParams(window.location.search);

    if (params?.has('key')) {
      key = params.get('key');
    }

    const deleteButton = document.querySelector('[data-delete]');
    deleteButton.dataset.key = key;

    try {
      Promise.all([
        getFromDb('recurring-income', key, appUser?.uid),
        getAllCategories(storeName),
      ])
        .then((values) => {
          const [ income, categories ] = values;
          cachedCategoriesLoaded = true;

          if (!networkCategoriesLoaded) {
            renderCategories(categories);
            populateForm(income);
          }
        });
    } catch (error) {
      const typicalState = document.querySelector('[data-typical-state]');
      const accessDenied = document.querySelector('[data-access-denied]');
      if (appUser) {
        const belongsToNobody = document.querySelector('[data-belongs-to-nobody]');
        belongsToNobody.removeAttribute('hidden');
      } else {
        const belongsToUser = document.querySelector('[data-belongs-to-user]');
        belongsToUser.removeAttribute('hidden');
      }

      typicalState.setAttribute('hidden', true);
      accessDenied.removeAttribute('hidden');
    }
  })();

  document.addEventListener('click', async (event) => {
    if (event.target.matches('[data-delete]')) {
      if (window.confirm('Are you sure you want to delete this recurring income?')) {
        try {
          await deleteFromDb('recurring-income', event.target.dataset.key, appUser?.uid);
          if (document.referrer) {
            window.location.href = document.referrer;
          } else {
            window.location.href = `/overview`;
          }
        } catch (error) {
          window.alert(error.message);
        }
      }
    }
  });

  document.addEventListener('token-confirmed', async () => {
    if (appUser?.uid && isPayingUser) {
      Promise.all([
        getFromCloudDb('recurring-income', key, appUser?.uid),
        getAllCategoriesFromCloud(storeName, appUser?.uid),
      ])
        .then((values) => {
          const [ income, categories ] = values;
          networkCategoriesLoaded = true;

          if (!cachedCategoriesLoaded) {
            renderCategories(categories);
            populateForm(income);
          } else {
            const form = document.querySelector('form');
            const category = form.elements['category'].value;

            let categoryInput = document.querySelector(`[name=category][value="${category}"]`);
            const isFocused = categoryInput === document.activeElement;
            renderCategories(categories);
            categoryInput = document.querySelector(`[name=category][value="${category}"]`);
            if (categoryInput) {
              categoryInput.checked = true;
              if (isFocused) {
                categoryInput.focus();
              }
            }

            populateForm(income);
          }
        })
        .catch(console.error);
    }
  });
</script>
