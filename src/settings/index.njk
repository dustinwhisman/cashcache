---
title: Settings
layout: layouts/simple-layout.njk
---

<h1>
  Settings
</h1>

{% include "components/back-link.njk" %}

<h2>
  Display Settings
</h2>

<fieldset>
  <legend>
    Brightness
  </legend>
  <div class="stack" style="--stack-space: 0.5em">
    <label class="custom-checkbox">
      <input type="radio" name="brightness-mode" value="light-mode">
      {% include "svgs/radio-svg.njk" %}
      <span>
        Light Mode
      </span>
    </label>
    <label class="custom-checkbox">
      <input type="radio" name="brightness-mode" value="dark-mode">
      {% include "svgs/radio-svg.njk" %}
      <span>
        Dark Mode
      </span>
    </label>
    <label class="custom-checkbox">
      <input type="radio" name="brightness-mode" value="" checked>
      {% include "svgs/radio-svg.njk" %}
      <span>
        Use System Settings
      </span>
    </label>
  </div>
</fieldset>

<h2>
  Sorting Preferences: Expenses
</h2>
<form class="stack" data-expenses-preferences-form>
  <label class="custom-checkbox">
    <input type="checkbox" name="group-expenses-by-category">
    {% include "svgs/checkbox-svg.njk" %}
    <span>
      Group By Category
    </span>
  </label>

  <fieldset>
    <legend>
      Sort By
    </legend>
    <div class="stack" style="--stack-space: 0.5em">
      <label class="custom-checkbox">
        <input type="radio" name="sort-expenses-by" value="amount">
        {% include "svgs/radio-svg.njk" %}
        <span>
          Amount
        </span>
      </label>
      <label class="custom-checkbox">
        <input type="radio" name="sort-expenses-by" value="day">
        {% include "svgs/radio-svg.njk" %}
        <span>
          Date
        </span>
      </label>
    </div>
  </fieldset>

  <fieldset>
    <legend>
      Sort Order
    </legend>
    <div class="stack" style="--stack-space: 0.5em">
      <label class="custom-checkbox">
        <input type="radio" name="expenses-sort-order" value="descending">
        {% include "svgs/radio-svg.njk" %}
        <span data-expenses-descending-label>
          Descending
        </span>
      </label>
      <label class="custom-checkbox">
        <input type="radio" name="expenses-sort-order" value="ascending">
        {% include "svgs/radio-svg.njk" %}
        <span data-expenses-ascending-label>
          Ascending
        </span>
      </label>
    </div>
  </fieldset>

  <div>
    <button type="submit" data-save-expenses-preferences>
      Save Preferences
    </button>
  </div>
</form>

<h2>
  Sorting Preferences: Income
</h2>
<form class="stack" data-income-preferences-form>
  <label class="custom-checkbox">
    <input type="checkbox" name="group-income-by-category">
    {% include "svgs/checkbox-svg.njk" %}
    <span>
      Group By Category
    </span>
  </label>

  <fieldset>
    <legend>
      Sort By
    </legend>
    <div class="stack" style="--stack-space: 0.5em">
      <label class="custom-checkbox">
        <input type="radio" name="sort-income-by" value="amount">
        {% include "svgs/radio-svg.njk" %}
        <span>
          Amount
        </span>
      </label>
      <label class="custom-checkbox">
        <input type="radio" name="sort-income-by" value="day">
        {% include "svgs/radio-svg.njk" %}
        <span>
          Date
        </span>
      </label>
    </div>
  </fieldset>

  <fieldset>
    <legend>
      Sort Order
    </legend>
    <div class="stack" style="--stack-space: 0.5em">
      <label class="custom-checkbox">
        <input type="radio" name="income-sort-order" value="descending">
        {% include "svgs/radio-svg.njk" %}
        <span data-income-descending-label>
          Descending
        </span>
      </label>
      <label class="custom-checkbox">
        <input type="radio" name="income-sort-order" value="ascending">
        {% include "svgs/radio-svg.njk" %}
        <span data-income-ascending-label>
          Ascending
        </span>
      </label>
    </div>
  </fieldset>

  <div>
    <button type="submit" data-save-income-preferences>
      Save Preferences
    </button>
  </div>
</form>

<h2>
  Sorting Preferences: Savings
</h2>
<form class="stack" data-savings-preferences-form>
  <label class="custom-checkbox">
    <input type="checkbox" name="group-savings-by-category">
    {% include "svgs/checkbox-svg.njk" %}
    <span>
      Group By Category
    </span>
  </label>

  <fieldset>
    <legend>
      Sort Order
    </legend>
    <div class="stack" style="--stack-space: 0.5em">
      <label class="custom-checkbox">
        <input type="radio" name="savings-sort-order" value="descending">
        {% include "svgs/radio-svg.njk" %}
        <span>
          Largest to Smallest
        </span>
      </label>
      <label class="custom-checkbox">
        <input type="radio" name="savings-sort-order" value="ascending">
        {% include "svgs/radio-svg.njk" %}
        <span>
          Smallest to Largest
        </span>
      </label>
    </div>
  </fieldset>

  <div>
    <button type="submit" data-save-savings-preferences>
      Save Preferences
    </button>
  </div>
</form>

<h2>
  Sorting Preferences: Debt
</h2>

<p class="small">
  There are two popular methods for paying off debt. The mathematically best
  method is called the Avalanche method, and it has you pay the minimum amount
  for all debts, then throw as much money as possible at the one with the
  highest interest rate. This method saves you the most money over time, as it
  minimizes the amount of interest you have to pay.
</p>

<p class="small">
  The other method is called the Snowball method. Similar to the Avalanche
  method, you pay the minimum amount for all debts, but instead of paying off
  the highest interest, you focus on the debt with the smallest balance. This
  has the benefit of getting rid of smaller debts quickly, which can help with
  motivation. However, it allows higher-interest loans to accumulate interest,
  which can lead to paying more in the long run.
</p>

<form class="stack" data-debt-preferences-form>
  <fieldset>
    <legend>
      Debt Payment Strategy
    </legend>
    <div class="stack" style="--stack-space: 0.5em">
      <label class="custom-checkbox">
        <input type="radio" name="debt-method" value="avalanche">
        {% include "svgs/radio-svg.njk" %}
        <span>
          Avalanche (Recommended)
        </span>
      </label>
      <label class="custom-checkbox">
        <input type="radio" name="debt-method" value="snowball">
        {% include "svgs/radio-svg.njk" %}
        <span>
          Snowball
        </span>
      </label>
    </div>
  </fieldset>

  <div>
    <button type="submit" data-save-debt-preferences>
      Save Preferences
    </button>
  </div>
</form>

<script>
  if (brightnessMode) {
    const brightnessInput = document.querySelector(`[name=brightness-mode][value=${brightnessMode}]`);
    brightnessInput.checked = true;
  }

  (() => {
    const preferences = localStorage.getItem('expenses-preferences') || '{}';
    const {
      groupByCategory = true,
      sortBy = 'amount',
      order = 'descending'
    } = JSON.parse(preferences);

    if (groupByCategory) {
      const groupByCategoryInput = document.querySelector('[name=group-expenses-by-category]');
      groupByCategoryInput.checked = true;
    }

    const sortByInput = document.querySelector(`[name=sort-expenses-by][value=${sortBy}]`);
    const orderInput = document.querySelector(`[name=expenses-sort-order][value=${order}]`);
    sortByInput.checked = true;
    orderInput.checked = true;

    const descendingLabel = document.querySelector('[data-expenses-descending-label]');
    const ascendingLabel = document.querySelector('[data-expenses-ascending-label]');
    if (sortBy === 'amount') {
      descendingLabel.innerHTML = 'Largest to Smallest';
      ascendingLabel.innerHTML = 'Smallest to Largest';
    } else {
      descendingLabel.innerHTML = 'Newest to Oldest';
      ascendingLabel.innerHTML = 'Oldest to Newest';
    }
  })();

  (() => {
    const preferences = localStorage.getItem('income-preferences') || '{}';
    const {
      groupByCategory = true,
      sortBy = 'amount',
      order = 'descending'
    } = JSON.parse(preferences);

    if (groupByCategory) {
      const groupByCategoryInput = document.querySelector('[name=group-income-by-category]');
      groupByCategoryInput.checked = true;
    }

    const sortByInput = document.querySelector(`[name=sort-income-by][value=${sortBy}]`);
    const orderInput = document.querySelector(`[name=income-sort-order][value=${order}]`);
    sortByInput.checked = true;
    orderInput.checked = true;

    const descendingLabel = document.querySelector('[data-income-descending-label]');
    const ascendingLabel = document.querySelector('[data-income-ascending-label]');
    if (sortBy === 'amount') {
      descendingLabel.innerHTML = 'Largest to Smallest';
      ascendingLabel.innerHTML = 'Smallest to Largest';
    } else {
      descendingLabel.innerHTML = 'Newest to Oldest';
      ascendingLabel.innerHTML = 'Oldest to Newest';
    }
  })();

  (() => {
    const preferences = localStorage.getItem('savings-preferences') || '{}';
    const {
      groupByCategory = true,
      order = 'descending'
    } = JSON.parse(preferences);

    if (groupByCategory) {
      const groupByCategoryInput = document.querySelector('[name=group-savings-by-category]');
      groupByCategoryInput.checked = true;
    }

    const orderInput = document.querySelector(`[name=savings-sort-order][value=${order}]`);
    orderInput.checked = true;
  })();

  (() => {
    const preferences = localStorage.getItem('debt-preferences') || '{}';
    const {
      method = 'avalanche'
    } = JSON.parse(preferences);

    const methodInput = document.querySelector(`[name=debt-method][value=${method}]`);
    methodInput.checked = true;
  })();

  document.addEventListener('change', (event) => {
    if (event.target.matches('[name=brightness-mode]')) {
      const rootElement = document.documentElement;
      const preference = event.target.value;
      rootElement.classList.remove(...rootElement.classList);
      if (preference) {
        rootElement.classList.add(preference);
        localStorage.setItem('brightness-mode', preference);
      } else {
        localStorage.removeItem('brightness-mode');
      }
    }

    if (event.target.matches('[name=sort-expenses-by]')) {
      const descendingLabel = document.querySelector('[data-expenses-descending-label]');
      const ascendingLabel = document.querySelector('[data-expenses-ascending-label]');
      if (event.target.value === 'amount') {
        descendingLabel.innerHTML = 'Largest to Smallest';
        ascendingLabel.innerHTML = 'Smallest to Largest';
      } else {
        descendingLabel.innerHTML = 'Newest to Oldest';
        ascendingLabel.innerHTML = 'Oldest to Newest';
      }
    }

    if (event.target.matches('[data-expenses-preferences-form] *')) {
      const savePreferencesButton = document.querySelector('[data-save-expenses-preferences]');
      savePreferencesButton.innerHTML = 'Save Preferences';
    }

    if (event.target.matches('[name=sort-income-by]')) {
      const descendingLabel = document.querySelector('[data-income-descending-label]');
      const ascendingLabel = document.querySelector('[data-income-ascending-label]');
      if (event.target.value === 'amount') {
        descendingLabel.innerHTML = 'Largest to Smallest';
        ascendingLabel.innerHTML = 'Smallest to Largest';
      } else {
        descendingLabel.innerHTML = 'Newest to Oldest';
        ascendingLabel.innerHTML = 'Oldest to Newest';
      }
    }

    if (event.target.matches('[data-income-preferences-form] *')) {
      const savePreferencesButton = document.querySelector('[data-save-income-preferences]');
      savePreferencesButton.innerHTML = 'Save Preferences';
    }

    if (event.target.matches('[data-savings-preferences-form] *')) {
      const savePreferencesButton = document.querySelector('[data-save-savings-preferences]');
      savePreferencesButton.innerHTML = 'Save Preferences';
    }

    if (event.target.matches('[data-debt-preferences-form] *')) {
      const savePreferencesButton = document.querySelector('[data-save-debt-preferences]');
      savePreferencesButton.innerHTML = 'Save Preferences';
    }
  });

  document.addEventListener('submit', (event) => {
    event.preventDefault();
    if (event.target.matches('[data-expenses-preferences-form]')) {
      const { elements } = event.target;
      const preferences = {
        groupByCategory: elements['group-expenses-by-category'].checked,
        sortBy: elements['sort-expenses-by'].value,
        order: elements['expenses-sort-order'].value,
      };

      localStorage.setItem('expenses-preferences', JSON.stringify(preferences));
      const savePreferencesButton = document.querySelector('[data-save-expenses-preferences]');
      savePreferencesButton.innerHTML = 'Saved!';
    }

    if (event.target.matches('[data-income-preferences-form]')) {
      const { elements } = event.target;
      const preferences = {
        groupByCategory: elements['group-income-by-category'].checked,
        sortBy: elements['sort-income-by'].value,
        order: elements['income-sort-order'].value,
      };

      localStorage.setItem('income-preferences', JSON.stringify(preferences));
      const savePreferencesButton = document.querySelector('[data-save-income-preferences]');
      savePreferencesButton.innerHTML = 'Saved!';
    }

    if (event.target.matches('[data-savings-preferences-form]')) {
      const { elements } = event.target;
      const preferences = {
        groupByCategory: elements['group-savings-by-category'].checked,
        order: elements['savings-sort-order'].value,
      };

      localStorage.setItem('savings-preferences', JSON.stringify(preferences));
      const savePreferencesButton = document.querySelector('[data-save-savings-preferences]');
      savePreferencesButton.innerHTML = 'Saved!';
    }

    if (event.target.matches('[data-debt-preferences-form]')) {
      const { elements } = event.target;
      const preferences = {
        method: elements['debt-method'].value,
      };

      localStorage.setItem('debt-preferences', JSON.stringify(preferences));
      const savePreferencesButton = document.querySelector('[data-save-debt-preferences]');
      savePreferencesButton.innerHTML = 'Saved!';
    }
  });
</script>
