---
title: Monthly Insights
layout: layouts/simple-layout.njk
---

<style>
  .dates-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    font-size: calc(var(--h6));
  }

  .dates-grid > div {
    padding: 0.5em;
    border: 0.1em solid var(--text-color);
    display: flex;
    flex-direction: column;
  }

  .day-marker {
    margin-block-end: auto;
  }

  .day-marker,
  .expenses-marker,
  .income-marker {
    font-size: calc(var(--tiny));
  }

  .expenses-marker,
  .income-marker {
    text-align: right;
  }

  .expenses-marker {
    color: var(--red);
  }

  .income-marker {
    color: var(--green);
  }
</style>

{% include "components/insights-month-nav.njk" %}

<div data-heat-map class="stack" hidden>
  <h3>
    Heat Map
  </h3>
  <p>
    Here's how much money you spent or earned, broken down by day of the month.
  </p>
  <div class="dates-grid" data-dates-grid>
    <div class="text-align:center font-weight:bold">S</div>
    <div class="text-align:center font-weight:bold">M</div>
    <div class="text-align:center font-weight:bold">T</div>
    <div class="text-align:center font-weight:bold">W</div>
    <div class="text-align:center font-weight:bold">T</div>
    <div class="text-align:center font-weight:bold">F</div>
    <div class="text-align:center font-weight:bold">S</div>
  </div>
</div>

{% include "scripts/format-currency.njk" %}
<script type="module">
  import { getAllFromIndex } from '/scripts/db.mjs';

  (async () => {
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const firstDayOfMonth = new Date(year, month, 1).getDay();
    const paddingDays = (daysInMonth + firstDayOfMonth) % 7 !== 0
      ? 7 - ((daysInMonth + firstDayOfMonth) % 7)
      : 0;

    const expenses = await getAllFromIndex('expenses', 'year-month', year, month);
    const totalExpenses = expenses.reduce((acc, expense) => (acc + expense.amount), 0);

    const income = await getAllFromIndex('income', 'year-month', year, month);
    const totalIncome = income.reduce((acc, income) => (acc + income.amount), 0);

    const datesGrid = document.querySelector('[data-dates-grid]');
    for (let i = 0; i < firstDayOfMonth; i += 1) {
      datesGrid.innerHTML += '<div></div>';
    }

    for (let i = 0; i < daysInMonth; i += 1) {
      const expensesOnDay = expenses.reduce((acc, expense) => {
        if (expense.day !== i + 1) {
          return acc;
        }

        return acc + expense.amount;
      }, 0);
      const percentExpenses = Math.ceil(expensesOnDay / totalExpenses * 100);

      const incomeOnDay = income.reduce((acc, income) => {
        if (income.day !== i + 1) {
          return acc;
        }

        return acc + income.amount;
      }, 0);
      const percentIncome = Math.ceil(incomeOnDay / totalIncome * 100);

      datesGrid.innerHTML += `
        <div>
          <div class="day-marker">${i + 1}</div>
          ${expensesOnDay
            ? `
              <div style="width: 100%; height: 1rem; background: linear-gradient(to left, var(--red), var(--red) ${percentExpenses}%, var(--bg-color) ${percentExpenses}%, var(--bg-color) 100%)"></div>
              <div class="expenses-marker">${formatCurrency(expensesOnDay)}</div>
            `
            : ''}
          ${incomeOnDay
            ? `
              <div style="width: 100%; height: 1rem; background: linear-gradient(to left, var(--green), var(--green) ${percentIncome}%, var(--bg-color) ${percentIncome}%, var(--bg-color) 100%)"></div>
              <div class="income-marker">${formatCurrency(incomeOnDay)}</div>
            `
            : ''}
        </div>
      `;
    }

    for (let i = 0; i < paddingDays; i += 1) {
      datesGrid.innerHTML += '<div></div>';
    }

    const heatMapBlock = document.querySelector('[data-heat-map]');
    heatMapBlock.removeAttribute('hidden');
  })();
</script>
