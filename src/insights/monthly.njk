---
title: Monthly Insights
layout: layouts/simple-layout.njk
---

<style>
  .dates-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    font-size: calc(var(--h6));
  }

  .dates-grid > div {
    padding: 0.5em;
    border: 0.1em solid var(--text-color);
    display: flex;
    flex-direction: column;
  }

  .day-marker {
    margin-block-end: auto;
  }

  .day-marker,
  .expenses-marker,
  .income-marker {
    font-size: calc(var(--tiny));
  }

  .expenses-marker,
  .income-marker {
    text-align: right;
  }

  .expenses-marker {
    color: var(--red);
  }

  .income-marker {
    color: var(--green);
  }
</style>

{% include "components/insights-month-nav.njk" %}

<div data-heat-map class="stack" hidden>
  <h3>
    Heat Map
  </h3>
  <p>
    Here's how much money you spent or earned, broken down by day of the month.
  </p>
  <div class="dates-grid" data-dates-grid>
    <div class="text-align:center font-weight:bold">S</div>
    <div class="text-align:center font-weight:bold">M</div>
    <div class="text-align:center font-weight:bold">T</div>
    <div class="text-align:center font-weight:bold">W</div>
    <div class="text-align:center font-weight:bold">T</div>
    <div class="text-align:center font-weight:bold">F</div>
    <div class="text-align:center font-weight:bold">S</div>
  </div>
</div>

<div class="stack" data-savings-rate hidden>
  <h3>
    Savings Rate
  </h3>
</div>

<div class="stack" data-month-comparison hidden>
  <h3>
    Month to Month Comparisons
  </h3>
</div>

<div class="stack" data-year-comparison hidden>
  <h3>
    Year to Year Comparisons
  </h3>
</div>

{% include "scripts/firebase.njk" %}
{% include "scripts/format-currency.njk" %}
<script type="module">
  import { getAllFromIndex } from '/scripts/db.mjs';

  const generateDateGrid = (expenses, income, totalExpenses, totalIncome) => {
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const firstDayOfMonth = new Date(year, month, 1).getDay();
    const paddingDays = (daysInMonth + firstDayOfMonth) % 7 !== 0
      ? 7 - ((daysInMonth + firstDayOfMonth) % 7)
      : 0;

    const datesGrid = document.querySelector('[data-dates-grid]');
    for (let i = 0; i < firstDayOfMonth; i += 1) {
      datesGrid.innerHTML += '<div></div>';
    }

    for (let i = 0; i < daysInMonth; i += 1) {
      const expensesOnDay = expenses.reduce((acc, expense) => {
        if (expense.day !== i + 1) {
          return acc;
        }

        return acc + expense.amount;
      }, 0);
      const percentExpenses = Math.ceil(expensesOnDay / totalExpenses * 100);

      const incomeOnDay = income.reduce((acc, income) => {
        if (income.day !== i + 1) {
          return acc;
        }

        return acc + income.amount;
      }, 0);
      const percentIncome = Math.ceil(incomeOnDay / totalIncome * 100);

      datesGrid.innerHTML += `
        <div>
          <div class="day-marker">${i + 1}</div>
          ${expensesOnDay
            ? `
              <div style="width: 100%; height: 1rem; background: linear-gradient(to left, var(--red), var(--red) ${percentExpenses}%, var(--bg-color) ${percentExpenses}%, var(--bg-color) 100%)"></div>
              <div class="expenses-marker">${formatCurrency(expensesOnDay)}</div>
            `
            : ''}
          ${incomeOnDay
            ? `
              <div style="width: 100%; height: 1rem; background: linear-gradient(to left, var(--green), var(--green) ${percentIncome}%, var(--bg-color) ${percentIncome}%, var(--bg-color) 100%)"></div>
              <div class="income-marker">${formatCurrency(incomeOnDay)}</div>
            `
            : ''}
        </div>
      `;
    }

    for (let i = 0; i < paddingDays; i += 1) {
      datesGrid.innerHTML += '<div></div>';
    }

    const heatMapBlock = document.querySelector('[data-heat-map]');
    heatMapBlock.removeAttribute('hidden');
  };

  const compareToLastMonth = async (totalExpenses, totalIncome, totalSavings, totalDebt) => {
    const monthToMonthBlock = document.querySelector('[data-month-comparison]');

    const lastMonthsExpenses = await getAllFromIndex('expenses', 'year-month', prevYear, prevMonth, appUser?.uid);
    const lastMonthsTotalExpenses = lastMonthsExpenses.reduce((acc, expense) => (acc + expense.amount), 0);

    if (lastMonthsTotalExpenses > totalExpenses) {
      monthToMonthBlock.innerHTML += `
        <p>
          You spent ${formatCurrency(lastMonthsTotalExpenses - totalExpenses)}
          less this month than you did last month.
        </p>
      `;
    } else if (lastMonthsTotalExpenses < totalExpenses) {
      monthToMonthBlock.innerHTML += `
        <p>
          You spent ${formatCurrency(totalExpenses - lastMonthsTotalExpenses)}
          more this month than you did last month.
        </p>
      `;
    } else {
      monthToMonthBlock.innerHTML += `
        <p>
          Wow! You spent exactly the same amount
          (${formatCurrency(totalExpenses)}) this month as you did last month.
          What are the odds?
        </p>
      `;
    }

    const lastMonthsIncome = await getAllFromIndex('income', 'year-month', prevYear, prevMonth, appUser?.uid);
    const lastMonthsTotalIncome = lastMonthsIncome.reduce((acc, income) => (acc + income.amount), 0);

    if (lastMonthsTotalIncome > totalIncome) {
      monthToMonthBlock.innerHTML += `
        <p>
          You earned ${formatCurrency(lastMonthsTotalIncome - totalIncome)} less
          this month than you did last month.
        </p>
      `;
    } else if (lastMonthsTotalIncome < totalIncome) {
      monthToMonthBlock.innerHTML += `
        <p>
          You earned ${formatCurrency(totalIncome - lastMonthsTotalIncome)} more
          this month than you did last month.
        </p>
      `;
    } else {
      monthToMonthBlock.innerHTML += `
        <p>
          You earned exactly the same amount (${formatCurrency(totalIncome)})
          this month as you did last month.
        </p>
      `;
    }

    const lastMonthsSavings = await getAllFromIndex('savings', 'year-month', prevYear, prevMonth, appUser?.uid);
    const lastMonthsTotalSavings = lastMonthsSavings.reduce((acc, savings) => (acc + savings.amount), 0);

    if (lastMonthsTotalSavings > totalSavings) {
      monthToMonthBlock.innerHTML += `
        <p>
          Your total savings went down by
          ${formatCurrency(lastMonthsTotalSavings - totalSavings)} since last
          month.
        </p>
      `;
    } else if (lastMonthsTotalSavings < totalSavings) {
      monthToMonthBlock.innerHTML += `
        <p>
          Your total savings went up by
          ${formatCurrency(totalSavings - lastMonthsTotalSavings)} since last
          month.
        </p>
      `;
    } else {
      monthToMonthBlock.innerHTML += `
        <p>
          Wow! Your savings stayed exactly the same
          (${formatCurrency(totalSavings)}). What are the odds?
        </p>
      `;
    }

    const lastMonthsDebt = await getAllFromIndex('debt', 'year-month', prevYear, prevMonth, appUser?.uid);
    const lastMonthsTotalDebt = lastMonthsDebt.reduce((acc, debt) => (acc + debt.amount), 0);

    if (lastMonthsTotalDebt > totalDebt) {
      monthToMonthBlock.innerHTML += `
        <p>
          Your total debt went down by
          ${formatCurrency(lastMonthsTotalDebt - totalDebt)} since last
          month.
        </p>
      `;
    } else if (lastMonthsTotalDebt < totalDebt) {
      monthToMonthBlock.innerHTML += `
        <p>
          Your total debt went up by
          ${formatCurrency(totalDebt - lastMonthsTotalDebt)} since last
          month.
        </p>
      `;
    } else {
      if (totalDebt === 0) {
        monthToMonthBlock.innerHTML += `
          <p>
            You remain debt-free. Nice work!
          </p>
        `;
      } else {
        monthToMonthBlock.innerHTML += `
          <p>
            Wow! Your debt stayed exactly the same
            (${formatCurrency(totalDebt)}). What are the odds?
          </p>
        `;
      }
    }

    monthToMonthBlock.removeAttribute('hidden');
  };

  const compareToLastYear = async (totalExpenses, totalIncome, totalSavings, totalDebt) => {
    const yearToYearBlock = document.querySelector('[data-year-comparison]');

    const lastYearsExpenses = await getAllFromIndex('expenses', 'year-month', year - 1, month, appUser?.uid);
    const lastYearsTotalExpenses = lastYearsExpenses.reduce((acc, expense) => (acc + expense.amount), 0);

    if (lastYearsTotalExpenses > totalExpenses) {
      yearToYearBlock.innerHTML += `
        <p>
          You spent ${formatCurrency(lastYearsTotalExpenses - totalExpenses)}
          less this month than you did this month last year.
        </p>
      `;
    } else if (lastYearsTotalExpenses < totalExpenses) {
      yearToYearBlock.innerHTML += `
        <p>
          You spent ${formatCurrency(totalExpenses - lastYearsTotalExpenses)}
          more this month than you did this month last year.
        </p>
      `;
    } else {
      yearToYearBlock.innerHTML += `
        <p>
          Wow! You spent exactly the same amount
          (${formatCurrency(totalExpenses)}) this month as you did this month
          last year. What are the odds?
        </p>
      `;
    }

    const lastYearsIncome = await getAllFromIndex('income', 'year-month', year - 1, month, appUser?.uid);
    const lastYearsTotalIncome = lastYearsIncome.reduce((acc, income) => (acc + income.amount), 0);

    if (lastYearsTotalIncome > totalIncome) {
      yearToYearBlock.innerHTML += `
        <p>
          You earned ${formatCurrency(lastYearsTotalIncome - totalIncome)} less
          this month than you did this month last year.
        </p>
      `;
    } else if (lastYearsTotalIncome < totalIncome) {
      yearToYearBlock.innerHTML += `
        <p>
          You earned ${formatCurrency(totalIncome - lastYearsTotalIncome)} more
          this month than you did this month last year.
        </p>
      `;
    } else {
      yearToYearBlock.innerHTML += `
        <p>
          You earned exactly the same amount (${formatCurrency(totalIncome)})
          this month as you did this month last year.
        </p>
      `;
    }

    const lastYearsSavings = await getAllFromIndex('savings', 'year-month', year - 1, month, appUser?.uid);
    const lastYearsTotalSavings = lastYearsSavings.reduce((acc, savings) => (acc + savings.amount), 0);

    if (lastYearsTotalSavings > totalSavings) {
      yearToYearBlock.innerHTML += `
        <p>
          Your total savings went down by
          ${formatCurrency(lastYearsTotalSavings - totalSavings)} since last
          year.
        </p>
      `;
    } else if (lastYearsTotalSavings < totalSavings) {
      yearToYearBlock.innerHTML += `
        <p>
          Your total savings went up by
          ${formatCurrency(totalSavings - lastYearsTotalSavings)} since last
          year.
        </p>
      `;
    } else {
      yearToYearBlock.innerHTML += `
        <p>
          Wow! Your savings stayed exactly the same
          (${formatCurrency(totalSavings)}). What are the odds?
        </p>
      `;
    }

    const lastYearsDebt = await getAllFromIndex('debt', 'year-month', year - 1, month, appUser?.uid);
    const lastYearsTotalDebt = lastYearsDebt.reduce((acc, debt) => (acc + debt.amount), 0);

    if (lastYearsTotalDebt > totalDebt) {
      yearToYearBlock.innerHTML += `
        <p>
          Your total debt went down by
          ${formatCurrency(lastYearsTotalDebt - totalDebt)} since last
          year.
        </p>
      `;
    } else if (lastYearsTotalDebt < totalDebt) {
      yearToYearBlock.innerHTML += `
        <p>
          Your total debt went up by
          ${formatCurrency(totalDebt - lastYearsTotalDebt)} since last
          year.
        </p>
      `;
    } else {
      if (totalDebt === 0) {
        yearToYearBlock.innerHTML += `
          <p>
            You remain debt-free. Nice work!
          </p>
        `;
      } else {
        yearToYearBlock.innerHTML += `
          <p>
            Wow! Your debt stayed exactly the same
            (${formatCurrency(totalDebt)}). What are the odds?
          </p>
        `;
      }
    }

    yearToYearBlock.removeAttribute('hidden');
  };

  const showSavingsRate = (totalExpenses, totalIncome) => {
    const savingsRate = ((totalIncome - totalExpenses) / totalIncome) * 100;
    if (isNaN(savingsRate)) {
      return;
    }

    const savingsRateBlock = document.querySelector('[data-savings-rate]');

    savingsRateBlock.innerHTML += `
      <p>
        Your savings rate this month was ${savingsRate.toFixed(2)}%.
      </p>
    `;

    savingsRateBlock.removeAttribute('hidden');
  };

  (async () => {
    const expenses = await getAllFromIndex('expenses', 'year-month', year, month, appUser?.uid);
    const totalExpenses = expenses.reduce((acc, expense) => (acc + expense.amount), 0);

    const income = await getAllFromIndex('income', 'year-month', year, month, appUser?.uid);
    const totalIncome = income.reduce((acc, income) => (acc + income.amount), 0);

    const savings = await getAllFromIndex('savings', 'year-month', year, month, appUser?.uid);
    const totalSavings = savings.reduce((acc, fund) => (acc + fund.amount), 0);

    const debt = await getAllFromIndex('debt', 'year-month', year, month, appUser?.uid);
    const totalDebt = debt.reduce((acc, loan) => (acc + loan.amount), 0);

    generateDateGrid(expenses, income, totalExpenses, totalIncome);
    compareToLastMonth(totalExpenses, totalIncome, totalSavings, totalDebt);
    compareToLastYear(totalExpenses, totalIncome, totalSavings, totalDebt);
    showSavingsRate(totalExpenses, totalIncome);
  })();
</script>
