---
title: Monthly Insights
layout: layouts/simple-layout.njk
description: See how this month went in terms of when and how much you spent or earned, and compare it to the previous month or year.
---

<style>
  .dates-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    font-size: calc(var(--h6));
  }

  .dates-grid > div {
    padding: 0.5em;
    border: 0.1em solid var(--text-color);
    display: flex;
    flex-direction: column;
  }

  .day-marker {
    margin-block-end: auto;
  }

  .day-marker,
  .expenses-marker,
  .income-marker {
    font-size: calc(var(--tiny));
  }

  .expenses-marker,
  .income-marker {
    text-align: right;
  }

  .expenses-marker {
    color: var(--red);
  }

  .income-marker {
    color: var(--green);
  }
</style>

<div class="stack" data-paywall-message hidden>
  <h1>
    Monthly Insights
  </h1>
  <p>
    Monthly insights are a premium feature, but here's a breakdown of what
    you're missing.
  </p>
  <ul class="stack" style="--stack-space: 0.75em">
    <li>
      A heat map of when you spent and earned money during the month. You might
      spot some patterns that you're unaware of, such as a predilection for
      shopping on the weekends or whatever.
    </li>
    <li>
      Your savings rate for the month. Remember, higher is better, and a
      negative number is bad news.
    </li>
    <li>
      Month to month comparisons of what you earned and spent, as well as how
      much your savings and debt changed.
    </li>
    <li>
      Year over year comparisons to show how you're doing compared to this time
      last year.
    </li>
  </ul>
  <div data-cta-log-in hidden>
    <a href="/login" class="button">
      Sign Up to Gain Access
    </a>
  </div>
  <div data-cta-subscribe hidden>
    <a href="/account" class="button">
      Subscribe to Gain Access
    </a>
  </div>
</div>

<div class="stack" data-monthly-insights>
  {% include "components/insights-month-nav.njk" %}

  <div data-heat-map class="stack" hidden>
    <h3>
      Heat Map
    </h3>
    <p>
      Here's how much money you spent or earned, broken down by day of the month.
    </p>
    <div class="dates-grid" data-dates-grid></div>
  </div>

  <h3>
    Savings Rate
  </h3>
  <div class="stack" data-savings-rate hidden></div>

  <h3>
    Month to Month Comparisons
  </h3>
  <div class="stack">
    <div data-monthly-expenses></div>
    <div data-monthly-income></div>
    <div data-monthly-savings></div>
    <div data-monthly-debt></div>
  </div>

  <h3>
    Year to Year Comparisons
  </h3>
  <div class="stack">
    <div data-yearly-expenses></div>
    <div data-yearly-income></div>
    <div data-yearly-savings></div>
    <div data-yearly-debt></div>
  </div>
</div>

{% include "scripts/firebase.njk" %}
{% include "scripts/format-currency.njk" %}
<script type="module">
  import { getAllFromIndex, getAllFromCloudIndex } from '/scripts/db.mjs';

  const generateDateGrid = (expenses, income, totalExpenses, totalIncome) => {
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const firstDayOfMonth = new Date(year, month, 1).getDay();
    const paddingDays = (daysInMonth + firstDayOfMonth) % 7 !== 0
      ? 7 - ((daysInMonth + firstDayOfMonth) % 7)
      : 0;

    const datesGrid = document.querySelector('[data-dates-grid]');
    datesGrid.innerHTML = `
      <div class="text-align:center font-weight:bold">S</div>
      <div class="text-align:center font-weight:bold">M</div>
      <div class="text-align:center font-weight:bold">T</div>
      <div class="text-align:center font-weight:bold">W</div>
      <div class="text-align:center font-weight:bold">T</div>
      <div class="text-align:center font-weight:bold">F</div>
      <div class="text-align:center font-weight:bold">S</div>
    `;

    for (let i = 0; i < firstDayOfMonth; i += 1) {
      datesGrid.innerHTML += '<div></div>';
    }

    for (let i = 0; i < daysInMonth; i += 1) {
      const expensesOnDay = expenses.reduce((acc, expense) => {
        if (expense.day !== i + 1) {
          return acc;
        }

        return acc + expense.amount;
      }, 0);
      const percentExpenses = Math.ceil(expensesOnDay / totalExpenses * 100);

      const incomeOnDay = income.reduce((acc, income) => {
        if (income.day !== i + 1) {
          return acc;
        }

        return acc + income.amount;
      }, 0);
      const percentIncome = Math.ceil(incomeOnDay / totalIncome * 100);

      datesGrid.innerHTML += `
        <div>
          <div class="day-marker">${i + 1}</div>
          ${expensesOnDay
            ? `
              <div style="width: 100%; height: 1rem; background: linear-gradient(to left, var(--red), var(--red) ${percentExpenses}%, var(--bg-color) ${percentExpenses}%, var(--bg-color) 100%)"></div>
              <div class="expenses-marker">${formatCurrency(expensesOnDay)}</div>
            `
            : ''}
          ${incomeOnDay
            ? `
              <div style="width: 100%; height: 1rem; background: linear-gradient(to left, var(--green), var(--green) ${percentIncome}%, var(--bg-color) ${percentIncome}%, var(--bg-color) 100%)"></div>
              <div class="income-marker">${formatCurrency(incomeOnDay)}</div>
            `
            : ''}
        </div>
      `;
    }

    for (let i = 0; i < paddingDays; i += 1) {
      datesGrid.innerHTML += '<div></div>';
    }

    const heatMapBlock = document.querySelector('[data-heat-map]');
    heatMapBlock.removeAttribute('hidden');
  };

  const compareMonthlyExpenses = (lastMonthsExpenses, totalExpenses) => {
    const monthToMonthBlock = document.querySelector('[data-monthly-expenses]');
    const lastMonthsTotalExpenses = lastMonthsExpenses.reduce((acc, expense) => (acc + expense.amount), 0);

    if (lastMonthsTotalExpenses > totalExpenses) {
      monthToMonthBlock.innerHTML = `
        <p>
          You spent ${formatCurrency(lastMonthsTotalExpenses - totalExpenses)}
          less this month than you did last month.
        </p>
      `;
    } else if (lastMonthsTotalExpenses < totalExpenses) {
      monthToMonthBlock.innerHTML = `
        <p>
          You spent ${formatCurrency(totalExpenses - lastMonthsTotalExpenses)}
          more this month than you did last month.
        </p>
      `;
    } else {
      monthToMonthBlock.innerHTML = `
        <p>
          Wow! You spent exactly the same amount
          (${formatCurrency(totalExpenses)}) this month as you did last month.
          What are the odds?
        </p>
      `;
    }
  };

  const compareMonthlyIncome = (lastMonthsIncome, totalIncome) => {
    const monthToMonthBlock = document.querySelector('[data-monthly-income]');
    const lastMonthsTotalIncome = lastMonthsIncome.reduce((acc, income) => (acc + income.amount), 0);

    if (lastMonthsTotalIncome > totalIncome) {
      monthToMonthBlock.innerHTML = `
        <p>
          You earned ${formatCurrency(lastMonthsTotalIncome - totalIncome)} less
          this month than you did last month.
        </p>
      `;
    } else if (lastMonthsTotalIncome < totalIncome) {
      monthToMonthBlock.innerHTML = `
        <p>
          You earned ${formatCurrency(totalIncome - lastMonthsTotalIncome)} more
          this month than you did last month.
        </p>
      `;
    } else {
      monthToMonthBlock.innerHTML = `
        <p>
          You earned exactly the same amount (${formatCurrency(totalIncome)})
          this month as you did last month.
        </p>
      `;
    }
  };

  const compareMonthlySavings = (lastMonthsSavings, totalSavings) => {
    const monthToMonthBlock = document.querySelector('[data-monthly-savings]');
    const lastMonthsTotalSavings = lastMonthsSavings.reduce((acc, savings) => (acc + savings.amount), 0);

    if (lastMonthsTotalSavings > totalSavings) {
      monthToMonthBlock.innerHTML = `
        <p>
          Your total savings went down by
          ${formatCurrency(lastMonthsTotalSavings - totalSavings)} since last
          month.
        </p>
      `;
    } else if (lastMonthsTotalSavings < totalSavings) {
      monthToMonthBlock.innerHTML = `
        <p>
          Your total savings went up by
          ${formatCurrency(totalSavings - lastMonthsTotalSavings)} since last
          month.
        </p>
      `;
    } else {
      monthToMonthBlock.innerHTML = `
        <p>
          Wow! Your savings stayed exactly the same
          (${formatCurrency(totalSavings)}). What are the odds?
        </p>
      `;
    }
  };

  const compareMonthlyDebt = (lastMonthsDebt, totalDebt) => {
    const monthToMonthBlock = document.querySelector('[data-monthly-debt]');
    const lastMonthsTotalDebt = lastMonthsDebt.reduce((acc, debt) => (acc + debt.amount), 0);

    if (lastMonthsTotalDebt > totalDebt) {
      monthToMonthBlock.innerHTML = `
        <p>
          Your total debt went down by
          ${formatCurrency(lastMonthsTotalDebt - totalDebt)} since last
          month.
        </p>
      `;
    } else if (lastMonthsTotalDebt < totalDebt) {
      monthToMonthBlock.innerHTML = `
        <p>
          Your total debt went up by
          ${formatCurrency(totalDebt - lastMonthsTotalDebt)} since last
          month.
        </p>
      `;
    } else {
      if (totalDebt === 0) {
        monthToMonthBlock.innerHTML = `
          <p>
            You remain debt-free. Nice work!
          </p>
        `;
      } else {
        monthToMonthBlock.innerHTML = `
          <p>
            Wow! Your debt stayed exactly the same
            (${formatCurrency(totalDebt)}). What are the odds?
          </p>
        `;
      }
    }
  };

  const compareToLastMonth = async (totalExpenses, totalIncome, totalSavings, totalDebt) => {
    let lastMonthsExpenses = await getAllFromIndex('expenses', 'year-month', prevYear, prevMonth, appUser?.uid);
    let lastMonthsIncome = await getAllFromIndex('income', 'year-month', prevYear, prevMonth, appUser?.uid);
    let lastMonthsSavings = await getAllFromIndex('savings', 'year-month', prevYear, prevMonth, appUser?.uid);
    let lastMonthsDebt = await getAllFromIndex('debt', 'year-month', prevYear, prevMonth, appUser?.uid);

    compareMonthlyExpenses(lastMonthsExpenses, totalExpenses);
    compareMonthlyIncome(lastMonthsIncome, totalIncome);
    compareMonthlySavings(lastMonthsSavings, totalSavings);
    compareMonthlyDebt(lastMonthsDebt, totalDebt);

    if (appUser?.uid && isPayingUser) {
      lastMonthsExpenses = await getAllFromCloudIndex('expenses', prevYear, prevMonth, appUser?.uid);
      lastMonthsIncome = await getAllFromCloudIndex('income', prevYear, prevMonth, appUser?.uid);
      lastMonthsSavings = await getAllFromCloudIndex('savings', prevYear, prevMonth, appUser?.uid);
      lastMonthsDebt = await getAllFromCloudIndex('debt', prevYear, prevMonth, appUser?.uid);

      compareMonthlyExpenses(lastMonthsExpenses, totalExpenses);
      compareMonthlyIncome(lastMonthsIncome, totalIncome);
      compareMonthlySavings(lastMonthsSavings, totalSavings);
      compareMonthlyDebt(lastMonthsDebt, totalDebt);
    }
  };

  const compareYearlyExpenses = (lastYearsExpenses, totalExpenses) => {
    const yearToYearBlock = document.querySelector('[data-yearly-expenses]');
    const lastYearsTotalExpenses = lastYearsExpenses.reduce((acc, expense) => (acc + expense.amount), 0);

    if (lastYearsTotalExpenses > totalExpenses) {
      yearToYearBlock.innerHTML = `
        <p>
          You spent ${formatCurrency(lastYearsTotalExpenses - totalExpenses)}
          less this month than you did this month last year.
        </p>
      `;
    } else if (lastYearsTotalExpenses < totalExpenses) {
      yearToYearBlock.innerHTML = `
        <p>
          You spent ${formatCurrency(totalExpenses - lastYearsTotalExpenses)}
          more this month than you did this month last year.
        </p>
      `;
    } else {
      yearToYearBlock.innerHTML = `
        <p>
          Wow! You spent exactly the same amount
          (${formatCurrency(totalExpenses)}) this month as you did this month
          last year. What are the odds?
        </p>
      `;
    }
  };

  const compareYearlyIncome = (lastYearsIncome, totalIncome) => {
    const yearToYearBlock = document.querySelector('[data-yearly-income]');
    const lastYearsTotalIncome = lastYearsIncome.reduce((acc, income) => (acc + income.amount), 0);

    if (lastYearsTotalIncome > totalIncome) {
      yearToYearBlock.innerHTML = `
        <p>
          You earned ${formatCurrency(lastYearsTotalIncome - totalIncome)} less
          this month than you did this month last year.
        </p>
      `;
    } else if (lastYearsTotalIncome < totalIncome) {
      yearToYearBlock.innerHTML = `
        <p>
          You earned ${formatCurrency(totalIncome - lastYearsTotalIncome)} more
          this month than you did this month last year.
        </p>
      `;
    } else {
      yearToYearBlock.innerHTML = `
        <p>
          You earned exactly the same amount (${formatCurrency(totalIncome)})
          this month as you did this month last year.
        </p>
      `;
    }
  };

  const compareYearlySavings = (lastYearsSavings, totalSavings) => {
    const yearToYearBlock = document.querySelector('[data-yearly-savings]');
    const lastYearsTotalSavings = lastYearsSavings.reduce((acc, savings) => (acc + savings.amount), 0);

    if (lastYearsTotalSavings > totalSavings) {
      yearToYearBlock.innerHTML = `
        <p>
          Your total savings went down by
          ${formatCurrency(lastYearsTotalSavings - totalSavings)} since last
          year.
        </p>
      `;
    } else if (lastYearsTotalSavings < totalSavings) {
      yearToYearBlock.innerHTML = `
        <p>
          Your total savings went up by
          ${formatCurrency(totalSavings - lastYearsTotalSavings)} since last
          year.
        </p>
      `;
    } else {
      yearToYearBlock.innerHTML = `
        <p>
          Wow! Your savings stayed exactly the same
          (${formatCurrency(totalSavings)}). What are the odds?
        </p>
      `;
    }
  };

  const compareYearlyDebt = (lastYearsDebt, totalDebt) => {
    const yearToYearBlock = document.querySelector('[data-yearly-debt]');
    const lastYearsTotalDebt = lastYearsDebt.reduce((acc, debt) => (acc + debt.amount), 0);

    if (lastYearsTotalDebt > totalDebt) {
      yearToYearBlock.innerHTML = `
        <p>
          Your total debt went down by
          ${formatCurrency(lastYearsTotalDebt - totalDebt)} since last
          year.
        </p>
      `;
    } else if (lastYearsTotalDebt < totalDebt) {
      yearToYearBlock.innerHTML = `
        <p>
          Your total debt went up by
          ${formatCurrency(totalDebt - lastYearsTotalDebt)} since last
          year.
        </p>
      `;
    } else {
      if (totalDebt === 0) {
        yearToYearBlock.innerHTML = `
          <p>
            You remain debt-free. Nice work!
          </p>
        `;
      } else {
        yearToYearBlock.innerHTML = `
          <p>
            Wow! Your debt stayed exactly the same
            (${formatCurrency(totalDebt)}). What are the odds?
          </p>
        `;
      }
    }
  };

  const compareToLastYear = async (totalExpenses, totalIncome, totalSavings, totalDebt) => {
    let lastYearsExpenses = await getAllFromIndex('expenses', 'year-month', year - 1, month, appUser?.uid);
    let lastYearsIncome = await getAllFromIndex('income', 'year-month', year - 1, month, appUser?.uid);
    let lastYearsSavings = await getAllFromIndex('savings', 'year-month', year - 1, month, appUser?.uid);
    let lastYearsDebt = await getAllFromIndex('debt', 'year-month', year - 1, month, appUser?.uid);

    compareYearlyExpenses(lastYearsExpenses, totalExpenses);
    compareYearlyIncome(lastYearsIncome, totalIncome);
    compareYearlySavings(lastYearsSavings, totalSavings);
    compareYearlyDebt(lastYearsDebt, totalDebt);

    if (appUser?.uid && isPayingUser) {
      lastYearsExpenses = await getAllFromCloudIndex('expenses', year - 1, month, appUser?.uid);
      lastYearsIncome = await getAllFromCloudIndex('income', year - 1, month, appUser?.uid);
      lastYearsSavings = await getAllFromCloudIndex('savings', year - 1, month, appUser?.uid);
      lastYearsDebt = await getAllFromCloudIndex('debt', year - 1, month, appUser?.uid);

      compareYearlyExpenses(lastYearsExpenses, totalExpenses);
      compareYearlyIncome(lastYearsIncome, totalIncome);
      compareYearlySavings(lastYearsSavings, totalSavings);
      compareYearlyDebt(lastYearsDebt, totalDebt);
    }
  };

  const showSavingsRate = (totalExpenses, totalIncome) => {
    const savingsRate = ((totalIncome - totalExpenses) / totalIncome) * 100;
    if (isNaN(savingsRate)) {
      return;
    }

    const savingsRateBlock = document.querySelector('[data-savings-rate]');

    savingsRateBlock.innerHTML = `
      <p>
        Your savings rate this month was ${savingsRate.toFixed(2)}%.
      </p>
    `;

    savingsRateBlock.removeAttribute('hidden');
  };

  (async () => {
    if (!appUser?.uid || !isPayingUser) {
      const monthlyInsights = document.querySelector('[data-monthly-insights]');
      const paywallMessage = document.querySelector('[data-paywall-message]');

      monthlyInsights.setAttribute('hidden', true);
      paywallMessage.removeAttribute('hidden');

      if (!appUser?.uid) {
        const ctaLogIn = document.querySelector('[data-cta-log-in]');
        ctaLogIn.removeAttribute('hidden');
      } else {
        const ctaSubscribe = document.querySelector('[data-cta-subscribe]');
        ctaSubscribe.removeAttribute('hidden');
      }

      return;
    }

    let expenses = await getAllFromIndex('expenses', 'year-month', year, month, appUser?.uid);
    let totalExpenses = expenses.reduce((acc, expense) => (acc + expense.amount), 0);

    let income = await getAllFromIndex('income', 'year-month', year, month, appUser?.uid);
    let totalIncome = income.reduce((acc, income) => (acc + income.amount), 0);

    let savings = await getAllFromIndex('savings', 'year-month', year, month, appUser?.uid);
    let totalSavings = savings.reduce((acc, fund) => (acc + fund.amount), 0);

    let debt = await getAllFromIndex('debt', 'year-month', year, month, appUser?.uid);
    let totalDebt = debt.reduce((acc, loan) => (acc + loan.amount), 0);

    generateDateGrid(expenses, income, totalExpenses, totalIncome);
    compareToLastMonth(totalExpenses, totalIncome, totalSavings, totalDebt);
    compareToLastYear(totalExpenses, totalIncome, totalSavings, totalDebt);
    showSavingsRate(totalExpenses, totalIncome);

    if (appUser?.uid && isPayingUser) {
      expenses = await getAllFromCloudIndex('expenses', year, month, appUser?.uid);
      totalExpenses = expenses.reduce((acc, expense) => (acc + expense.amount), 0);

      income = await getAllFromCloudIndex('income', year, month, appUser?.uid);
      totalIncome = income.reduce((acc, income) => (acc + income.amount), 0);

      savings = await getAllFromCloudIndex('savings', year, month, appUser?.uid);
      totalSavings = savings.reduce((acc, fund) => (acc + fund.amount), 0);

      debt = await getAllFromCloudIndex('debt', year, month, appUser?.uid);
      totalDebt = debt.reduce((acc, loan) => (acc + loan.amount), 0);

      generateDateGrid(expenses, income, totalExpenses, totalIncome);
      compareToLastMonth(totalExpenses, totalIncome, totalSavings, totalDebt);
      compareToLastYear(totalExpenses, totalIncome, totalSavings, totalDebt);
      showSavingsRate(totalExpenses, totalIncome);
    }
  })();
</script>
