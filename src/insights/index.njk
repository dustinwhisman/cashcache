---
title: Insights
layout: layouts/simple-layout.njk
---

<h1>
  Insights
</h1>

<p>
  Here are the key takeaways from your entire backlog of data. Keep in mind that
  this is not financial advice, and assumptions factor heavily into the
  calculations that drive these estimates.
</p>

{% include "components/back-link.njk" %}

<div data-progress-chart class="stack" hidden>
  <h2>
    Progress Chart
  </h2>
  <p>
    This is your progress chart. It shows your expenses and income along with
    the amount that you could safely withdraw each month (assuming you spend no
    more than 4% of your total savings per year and your savings are invested).
  </p>
  <p>
    Once the safe withdrawal amount is consistently higher than expenses, you
    have "enough" and could consider retirement.
  </p>
</div>

<div data-runway class="stack" hidden>
  <h2>
    Runway
  </h2>
  <p>
    Your runway is how long you could survive off of savings with no income.
    This is a simplified number that doesn't consider taxes, insurance, or other
    real-world things that would happen during unemployment, but it's meant to
    give a rough idea of how well-prepared you are to go without income for
    whatever reason.
  </p>
</div>

<div data-retirement-amount class="stack" hidden>
  <h2>
    Retirement
  </h2>
  <div data-retirement-amount></div>
  <div data-retirement-years></div>
</div>

<div data-rolling-savings-rate class="stack" hidden>
  <h2>
    Savings Rate
  </h2>
  <p>
    Your savings rate is an indicator of how much money you saved compared to
    your total income. This chart breaks it down by month and shows rolling
    averages over different time scales.
  </p>
</div>

<script type="module">
  import { getAllFromObjectStore } from '/scripts/db.mjs';

  const formatMonthString = (year, month) => new Date(year, month, 1)
    .toLocaleString('en-US', {
      month: 'short',
      year: 'numeric',
    });
  const today = new Date();
  const currentMonth = `${formatMonthString(today.getFullYear(), today.getMonth())}`;
  const sortingFunction = (a, b) => {
    if (a.year < b.year) {
      return -1;
    }

    if (a.year > b.year) {
      return 1;
    }

    if (a.month < b.month) {
      return -1;
    }

    if (a.month > b.month) {
      return 1;
    }

    return 0;
  };

  (async () => {
    const allExpenses = await getAllFromObjectStore('expenses');
    const expensesByMonth = allExpenses.reduce((acc, expense) => {
      if (`${formatMonthString(expense.year, expense.month)}` === currentMonth) {
        return acc;
      }

      if (acc[`${formatMonthString(expense.year, expense.month)}`]) {
        acc[`${formatMonthString(expense.year, expense.month)}`].push(expense);
      } else {
        acc[`${formatMonthString(expense.year, expense.month)}`] = [expense];
      }

      return acc;
    }, {});

    const totalExpensesByMonth = Object.keys(expensesByMonth)
      .map((key) => ({
        year: expensesByMonth[key][0].year,
        month: expensesByMonth[key][0].month,
        label: key,
        total: expensesByMonth[key].reduce((acc, expense) => (acc + expense.amount), 0),
      }))
      .sort(sortingFunction);

    const allIncome = await getAllFromObjectStore('income');
    const incomeByMonth = allIncome.reduce((acc, income) => {
      if (`${formatMonthString(income.year, income.month)}` === currentMonth) {
        return acc;
      }

      if (acc[`${formatMonthString(income.year, income.month)}`]) {
        acc[`${formatMonthString(income.year, income.month)}`].push(income);
      } else {
        acc[`${formatMonthString(income.year, income.month)}`] = [income];
      }

      return acc;
    }, {});

    const totalIncomeByMonth = Object.keys(incomeByMonth)
      .map((key) => ({
        year: incomeByMonth[key][0].year,
        month: incomeByMonth[key][0].month,
        label: key,
        total: incomeByMonth[key].reduce((acc, income) => (acc + income.amount), 0),
      }))
      .sort(sortingFunction);

    const allSavings = await getAllFromObjectStore('savings');
    const savingsByMonth = allSavings.reduce((acc, savings) => {
      if (`${formatMonthString(savings.year, savings.month)}` === currentMonth) {
        return acc;
      }

      if (acc[`${formatMonthString(savings.year, savings.month)}`]) {
        acc[`${formatMonthString(savings.year, savings.month)}`].push(savings);
      } else {
        acc[`${formatMonthString(savings.year, savings.month)}`] = [savings];
      }

      return acc;
    }, {});

    const totalSavingsByMonth = Object.keys(savingsByMonth)
      .map((key) => ({
        year: savingsByMonth[key][0].year,
        month: savingsByMonth[key][0].month,
        label: key,
        total: savingsByMonth[key].reduce((acc, savings) => (acc + savings.amount), 0),
      }))
      .sort(sortingFunction);

    console.log({
      totalExpensesByMonth,
      totalIncomeByMonth,
      totalSavingsByMonth,
    });
  })();
</script>
