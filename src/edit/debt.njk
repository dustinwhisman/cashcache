---
title: Edit Debt
layout: layouts/simple-layout.njk
description: Edit or delete debt.
---

<h1>
  Edit Debt
</h1>

<div>
  <a href="/overview" data-back-link>
    Go Back
  </a>
</div>

<div class="stack" data-access-denied hidden>
  <p>You don't have access to this record.</p>
  <p data-belongs-to-user hidden>
    It belongs to a user that isn't you. You may need to log in to see it or
    change accounts if you are already logged in.
  </p>
  <p data-belongs-to-nobody hidden>
    It is not associated with a user, which means that it should only be seen by
    somebody who is not logged in.
  </p>
</div>

<div class="stack" data-typical-state>
  <div>
    <button type="button" data-delete data-key="">
      Delete this Debt
    </button>
  </div>

  <form class="stack">
    {% include "inputs/year-month-inputs.njk" %}
    <div>
      <label for="debt-description">
        Description
      </label>
      <input id="debt-description" type="text" name="debt-description" required>
    </div>
    <div>
      <label for="amount">
        Balance
      </label>
      <input id="amount" type="text" name="amount" inputmode="numeric" pattern="^(\s{1,})?\$?\d{1,3}(,?\d{3})*(\.\d+)?(\s{1,})?$" style="width: 12ch" autofill="false" autocomplete="off" required>
    </div>
    <div>
      <label for="minimum-payment">
        Minimum Payment
      </label>
      <input id="minimum-payment" type="text" name="minimum-payment" inputmode="numeric" pattern="^(\s{1,})?\$?\d{1,3}(,?\d{3})*(\.\d+)?(\s{1,})?$" style="width: 12ch" autofill="false" autocomplete="off" required>
    </div>
    <div>
      <label for="interest-rate">
        Interest Rate
      </label>
      <input id="interest-rate" type="text" name="interest-rate" inputmode="numeric" pattern="^(\s{1,})?\d{1,2}(\.\d+)?(%)?(\s{1,})?$" style="width: 12ch" autofill="false" autocomplete="off" required>
    </div>
    <input type="hidden" name="key" value="">
    <div>
      <span class="visually-hidden" role="status" data-submit-status></span>
      <button type="submit" data-label-saving="Saving..." data-label-saved="Saved!" data-label-failed="Failed to Save. Try Again?">
        Save Changes
      </button>
    </div>
  </form>
</div>

{% include "scripts/firebase.njk" %}
{% include "scripts/sanitize.njk" %}
<script src="/scripts/year-month-inputs.js"></script>
<script type="module">
  import { getFromDb, getFromCloudDb, addToDb, deleteFromDb } from '/scripts/db.mjs';
  import { updateBackLink, formatCurrency } from '/scripts/utilities/index.mjs';

  updateBackLink();

  let key;
  let networkDataLoaded = false;
  let cachedDataLoaded = false;
  document.addEventListener('submit', async (event) => {
    event.preventDefault();

    const { elements } = event.target;
    const debt = {
      uid: appUser?.uid,
      key: elements['key'].value || null,
      year: Number(elements['year'].value),
      month: Number(elements['month'].value) - 1,
      description: elements['debt-description'].value,
      amount: sanitize(elements['amount'].value),
      minimumPayment: sanitize(elements['minimum-payment'].value),
      interestRate: sanitize(elements['interest-rate'].value),
    };

    const statusElement = document.querySelector('[data-submit-status]');
    const button = event.target.querySelector('button[type=submit]');
    const savingMessage = button.dataset.labelSaving;
    const savedMessage = button.dataset.labelSaved;
    const failedMessage = button.dataset.labelFailed;

    try {
      button.innerHTML = savingMessage;
      statusElement.innerHTML = savingMessage;

      await addToDb('debt', debt);

      button.innerHTML = savedMessage;
      statusElement.innerHTML = savedMessage;

      const month = Number(elements['month'].value) - 1;
      const year = Number(elements['year'].value);
      window.location.href = `/overview?m=${month}&y=${year}`;
    } catch (error) {
      button.innerHTML = failedMessage;
      statusElement.innerHTML = failedMessage;
      console.error(error);
    }
  });

  const populateForm = (debt) => {
    const form = document.querySelector('form');
    const { elements } = form;
    elements['key'].value = debt.key;

    if (elements['year'] !== document.activeElement) {
      elements['year'].value = `${debt.year}`;
    }

    if (elements['month'] !== document.activeElement) {
      elements['month'].value = `${debt.month + 1}`;
    }

    if (elements['debt-description'] !== document.activeElement) {
      elements['debt-description'].value = `${debt.description}`;
    }

    if (elements['amount'] !== document.activeElement) {
      elements['amount'].value = `${formatCurrency(debt.amount)}`;
    }

    if (elements['minimum-payment'] !== document.activeElement) {
      elements['minimum-payment'].value = `${formatCurrency(debt.minimumPayment)}`;
    }

    if (elements['interest-rate'] !== document.activeElement) {
      elements['interest-rate'].value = `${debt.interestRate}%`;
    }
  };

  (async () => {
    const params = new URLSearchParams(window.location.search);

    if (params?.has('key')) {
      key = params.get('key');
    }

    const deleteButton = document.querySelector('[data-delete]');
    deleteButton.dataset.key = key;

    try {
      const debt = await getFromDb('debt', key, appUser?.uid);
      cachedDataLoaded = true;

      if (!networkDataLoaded) {
        populateForm(debt);
      }
    } catch (error) {
      console.error(error);
      const typicalState = document.querySelector('[data-typical-state]');
      const accessDenied = document.querySelector('[data-access-denied]');
      if (appUser) {
        const belongsToNobody = document.querySelector('[data-belongs-to-nobody]');
        belongsToNobody.removeAttribute('hidden');
      } else {
        const belongsToUser = document.querySelector('[data-belongs-to-user]');
        belongsToUser.removeAttribute('hidden');
      }

      typicalState.setAttribute('hidden', true);
      accessDenied.removeAttribute('hidden');
    }
  })();

  document.addEventListener('click', async (event) => {
    if (event.target.matches('[data-delete]')) {
      if (window.confirm('Are you sure you want to delete this debt?')) {
        try {
          await deleteFromDb('debt', event.target.dataset.key, appUser?.uid);
          if (document.referrer) {
            window.location.href = document.referrer;
          } else {
            window.location.href = `/overview`;
          }
        } catch (error) {
          window.alert(error.message);
        }
      }
    }
  });

  document.addEventListener('token-confirmed', async () => {
    if (appUser?.uid && isPayingUser) {
      const debt = await getFromCloudDb('debt', key, appUser?.uid);
      networkDataLoaded = true;

      populateForm(debt);
    }
  });
</script>
