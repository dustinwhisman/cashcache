---
title: Account
layout: layouts/simple-layout.njk
---

<h1>
  Account
</h1>

<div class="stack" data-not-signed-in>
  <p>
    Wait a second while we check if you're signed in.
  </p>
  <p>
    If you are not signed in, you may do so on the
    <a href="/login">login page</a>.
  </p>
</div>
<div class="stack" data-is-signed-in hidden>
  <div data-signed-in-as></div>

  <div>
    <button type="button" data-log-out>
      Log Out
    </button>
  </div>

  <h2>
    Subscription Details
  </h2>
  <div class="stack" data-subscription-details hidden>
    <form data-manage-subscription-form>
      <input type="hidden" name="customer-id" value="">
      <div>
        <button type="submit">
          Manage Subscription
        </button>
      </div>
    </form>
  </div>
  <div data-not-subscribed hidden>
    <p>
      You have not completed payment. Subscribe to unlock premium features.
    </p>
    <form class="stack" data-subscription-form>
      <fieldset>
        <legend>
          Subscription Options
        </legend>
        <div class="stack" style="--stack-space: 0.5em">
          <label class="custom-checkbox">
            <input type="radio" name="price-id" value="{{ env.monthlyPlanId }}" checked>
            {% include "svgs/radio-svg.njk" %}
            <span>
              $5.00/month
            </span>
          </label>
          <label class="custom-checkbox">
            <input type="radio" name="price-id" value="{{ env.yearlyPlanId }}">
            {% include "svgs/radio-svg.njk" %}
            <span>
              $50.00/year
            </span>
          </label>
        </div>
      </fieldset>
      <div>
        <button type="submit">
          Subscribe
        </button>
      </div>
    </form>
  </div>

  <h2>
    Change Email Address
  </h2>
  <form class="stack" data-update-email-form>
    <div>
      <label for="new-email">
        New Email
      </label>
      <input id="new-email" type="email" name="new-email" style="width: 50ch">
    </div>
    <div>
      <button type="submit" data-update-email-button>
        Save Changes
      </button>
    </div>
  </form>

  <h2>
    Delete Account
  </h2>
  <p>
    Deleting your account will cancel all future payments and delete all data
    disassociated with your account from the cloud. All of your data will still be
    saved in your browser, so you can still access it as a free user.
  </p>
  <form data-delete-account>
    <input type="hidden" name="customer-id" value="">
    <button type="submit" data-delete-account>
      Delete Account
    </button>
  </form>
  <div data-status-update aria-live="polite"></div>
</div>

<script>
  document.addEventListener('user-logged-in', ({ detail }) => {
    const signedInAs = document.querySelector('[data-signed-in-as]');
    signedInAs.innerHTML = `
      <p>
        Signed in as ${detail.email}.
      </p>
    `;

    const isSignedInBlock = document.querySelector('[data-is-signed-in]');
    const notSignedInBlock = document.querySelector('[data-not-signed-in]');
    isSignedInBlock.removeAttribute('hidden');
    notSignedInBlock.setAttribute('hidden', true);
  });

  document.addEventListener('is-paying-customer', ({ detail }) => {
    const subscriptionDetails = document.querySelector('[data-subscription-details]');
    const customerIdInputs = document.querySelectorAll('[name="customer-id"]');
    customerIdInputs.forEach((input) => {
      input.value = detail;
    });
    subscriptionDetails.removeAttribute('hidden');
  });

  document.addEventListener('not-paying-customer', () => {
    const subscriptionForm = document.querySelector('[data-not-subscribed]');
    subscriptionForm.removeAttribute('hidden');
  });
</script>
{% include "scripts/firebase.njk" %}
<script type="module">
  import { getAllFromObjectStore, addToDb, deleteAllCloudRecords } from '/scripts/db.mjs';

  const stripe = Stripe('{{ env.stripePublishableKey }}');

  const createCheckoutSession = (priceId) => {
    return fetch('/api/create-checkout-session', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ priceId }),
    })
      .then((result) => {
        return result.json();
      })
      .catch(console.error);
  };

  const disassociateRecords = async (storeName, records) => {
    await Promise.all(records.map(async (record) => {
      try {
        await addToDb(storeName, {
          ...record,
          uid: null,
        }, true);
        return Promise.resolve();
      } catch (error) {
        console.error(error);
        return Promise.reject();
      }
    }));
  };

  const disassociateDataFromAccount = async (uid) => {
    const statusUpdate = document.querySelector('[data-status-update]');

    statusUpdate.innerHTML = '<p>Removing expenses associations from your account...</p>';
    const expensesRecords = await getAllFromObjectStore('expenses', uid);
    await disassociateRecords('expenses', expensesRecords);

    statusUpdate.innerHTML = '<p>Removing income associations from your account...</p>';
    const incomeRecords = await getAllFromObjectStore('income', uid);
    await disassociateRecords('income', incomeRecords);

    statusUpdate.innerHTML = '<p>Removing savings associations from your account...</p>';
    const savingsRecords = await getAllFromObjectStore('savings', uid);
    await disassociateRecords('savings', savingsRecords);

    statusUpdate.innerHTML = '<p>Removing debt associations from your account...</p>';
    const debtRecords = await getAllFromObjectStore('debt', uid);
    await disassociateRecords('debt', debtRecords);

    statusUpdate.innerHTML = '<p>Removing recurring expenses associations from your account...</p>';
    const recurringExpensesRecords = await getAllFromObjectStore('recurring-expenses', uid);
    await disassociateRecords('recurring-expenses', recurringExpensesRecords);

    statusUpdate.innerHTML = '<p>Removing recurring income associations from your account...</p>';
    const recurringIncomeRecords = await getAllFromObjectStore('recurring-income', uid);
    await disassociateRecords('recurring-income', recurringIncomeRecords);

    statusUpdate.innerHTML = `<p>Deleting all of your data from the cloud...</p>`;
    await deleteAllCloudRecords('expenses', uid);
    await deleteAllCloudRecords('income', uid);
    await deleteAllCloudRecords('savings', uid);
    await deleteAllCloudRecords('debt', uid);
    await deleteAllCloudRecords('recurring-expenses', uid);
    await deleteAllCloudRecords('recurring-income', uid);

    statusUpdate.innerHTML = `
      <p>
        All done. Your account has been deleted.
      </p>
    `;
    window.location.href = '/';
  };

  document.addEventListener('click', async (event) => {
    if (event.target.matches('[data-log-out]')) {
      firebase.auth().signOut()
        .then(() => {
          localStorage.removeItem('user');
          localStorage.removeItem('customerId');
          window.location.href = '/';
        })
        .catch(console.error);
    }
  });

  document.addEventListener('submit', async (event) => {
    event.preventDefault();
    if (event.target.matches('[data-update-email-form]')) {
      appUser.updateEmail(event.target.elements['new-email'].value).then(() => {
        window.location.reload(true);
      })
      .catch(() => {
        alert(`Since this action is sensitive, we'll need you to log in again real quick before trying again.`);
      });
    }

    if (event.target.matches('[data-subscription-form]')) {
      const priceId = event.target.elements['price-id'].value;
      createCheckoutSession(priceId).then((data) => {
        stripe.redirectToCheckout({
          sessionId: data.sessionId,
        });
      })
      .catch(console.error);
    }

    if (event.target.matches('[data-manage-subscription-form]')) {
      fetch('/api/customer-portal', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          customerId: event.target.elements['customer-id'].value,
        }),
      })
        .then((response) => response.json())
        .then((data) => {
          window.location.href = data.url;
        })
        .catch(console.error);
    }

    if (event.target.matches('[data-delete-account]')) {
      if (window.confirm('Are you sure you want to delete your account? This action is irreversible.')) {
        try {
          const request = await fetch('/api/cancel-subscription', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ customerId: event.target.elements['customer-id'].value }),
          });
          const result = await request.json();
        } catch (error) {
          console.error(error);
        }

        const uid = appUser.uid;
        appUser.delete().then(async () => {
          await disassociateDataFromAccount(uid);
        })
        .catch(() => {
          alert(`Since this action is sensitive, we'll need you to log in again real quick before trying again.`);
        });
      }
    }
  });
</script>
